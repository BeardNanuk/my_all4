#!/usr/bin/env python

## load Ux Uy in su format
## projection then save as numpy array
import obspy
import numpy as np
import pandas as pd
from myFormat.data_format import para_struct
from seisflows.tools.graphics import _convert_to_array
from scipy.interpolate import interp1d

## for ploting
import matplotlib.pyplot as plt
from seisflows.tools.graphics import plot_section

import argparse

## for i/o
from obspy import read
import scipy.io as sio
from obspy.core.stream import Stream

# for file finding
import glob




data_para = para_struct('data_para')
OUTPUT_FILES_path = "obf/output"
INPUT_path = "obf/input"
data_para.filenamelist = glob.glob(INPUT_path + '/' + "*file_single.su")

for f in data_para.filenamelist:
    fhead=(f[len(INPUT_path)+1:len(INPUT_path)+3])
    print(fhead)
    #relativefiles = './' + OUTPUT_FILES_path + '/' + fhead
    stream = read(f,format='SU', byteorder='<')
    #sismo_png_fn = './' + OUTPUT_FILES_path + '/' + fhead + '_seismo.png'
    #./savesismo f -save= sismo_png_fn -c=100 -xint=2 -yint=1000 -c=90 > /dev/null &
    ###matfile = './' + OUTPUT_FILES_path + '/' + fhead + '.mat'
    ###txtfile = './' + OUTPUT_FILES_path + '/' + fhead + '.txt'
    
        # convert stream to image array
    data = _convert_to_array(stream)
    adict = {}
    adict[f[:2]] = data
    #adict['pkt_np_array'] = data
    adict['whatever'] = 1

    ###sio.savemat(matfile,adict)
    ###np.savetxt(txtfile, data, fmt='%20.19f')   # X is an array
    
    ###npfile = './' + OUTPUT_FILES_path + '/' + fhead 
    
    if fhead=='Ux':
        print('is'+fhead)
        Ux_data = np.asarray(data)
        print('shape of Ux_data:', Ux_data.shape)
        #np.save(npfile,Ux_data)
    elif fhead=='Uz':
        print('is'+fhead)
        Uz_data = np.asarray(data)
        print('shape of Uz_data:', Uz_data.shape)
        #np.save(npfile,Uz_data)
        

### Projection to the normal vector of receiver surfaces
# all component of all received signals
data_big = np.stack((Ux_data,Uz_data)).transpose(1,0,2)
print('the shape of the multi-dim array:', data_big.shape)

# construct the receiver normal directions 
RecPos_fn = 'obf/input/RecPos_fn_000000.dat'
RecPos = pd.read_csv(RecPos_fn,header=None)
RecPosValues=(RecPos.values/0.1).transpose()
print('the shape of the unit normal vectors for all receivers:', RecPosValues.shape)

# projection to the normal vectors for all receivers
pd_big = RecPosValues*data_big
Un_data = pd_big.sum(1)



### copy npy as input

## convert txt file to numpy 
Ue_data_pd = pd.read_csv(INPUT_path + "/Uexp.txt",header=None)
Ue_data=np.transpose(Ue_data_pd.values)
##npfile = 'obf/output/Ue'
##np.save(npfile,Ue_data)
data_para.Ux_data = Ux_data
data_para.Uz_data = Uz_data
data_para.Un_data = Un_data
data_para.Ue_data = Ue_data
#Uefile = INPUT_path + 'Ue'
import pickle
pickle.dump(data_para,open('obf/input/data_para.pickle','wb'))












